pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = 'dockerhub-cred'          
        SONARQUBE_SERVER = 'SonarQube'                       
        NEXUS_URL = 'http://nexus:8081/repository/raw-hosted'
        APP_NAME = 'spring-kaddem2'
    }

    stages {
        stage('Clean Build') {
            steps {
                sh 'mvn clean install -DskipTests'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    script {
                        def scannerHome = tool name: 'SonarScanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                        withSonarQubeEnv("${SONARQUBE_SERVER}") {
                            sh """
                                export PATH=\$PATH:${scannerHome}/bin
                                ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=back \
                                -Dsonar.sources=src \
                                -Dsonar.java.binaries=target \
                                -Dsonar.login=${SONAR_TOKEN}
                            """
                        }
                    }
                }
            }
        }

        stage('Publish to Nexus') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                    sh '''
                        which zip || (apt-get update && apt-get install zip -y)
                        zip -j app.zip target/*.jar
                        curl -v -u $NEXUS_USER:$NEXUS_PASS \
                            --upload-file app.zip \
                            $NEXUS_URL/spring-kaddem2/app.zip
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("ezui7/${APP_NAME}:latest")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS) {
                        dockerImage.push()
                    }
                }
            }
        }
    }

    post {
        failure {
            mail to: 'nejdbedoui@gmail.com',
                 subject: "Spring Boot Build Failed: ${env.JOB_NAME}",
                 body: "Check Jenkins for details: ${env.BUILD_URL}"
        }
    }
}
